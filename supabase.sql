-- PROFILES
create table if not exists public.profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  email text not null,
  display_name text,
  role text check (role in ('visitor','user','admin')) default 'user',
  avatar_url text,
  created_at timestamp with time zone default now()
);

-- DOGS
create table if not exists public.dogs (
  id uuid primary key default gen_random_uuid(),
  owner_id uuid not null references public.profiles(id) on delete cascade,
  name text not null,
  sex text check (sex in ('M','F')) not null default 'M',
  dob date,
  city text,
  description text,
  status text check (status in ('draft','pending','approved','rejected')) not null default 'draft',
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);
create index if not exists dogs_owner_id_idx on public.dogs(owner_id);

-- ALBUMS
create table if not exists public.albums (
  id uuid primary key default gen_random_uuid(),
  dog_id uuid not null references public.dogs(id) on delete cascade,
  title text not null,
  description text,
  status text check (status in ('draft','pending','approved','rejected')) not null default 'draft',
  created_at timestamp with time zone default now()
);

-- PHOTOS
create table if not exists public.photos (
  id uuid primary key default gen_random_uuid(),
  album_id uuid not null references public.albums(id) on delete cascade,
  image_url text not null,
  caption text,
  is_sensitive boolean default false,
  created_at timestamp with time zone default now()
);

-- MODERATION LOGS
create table if not exists public.moderation_logs (
  id bigint generated by default as identity primary key,
  entity_type text check (entity_type in ('dog','album','photo')) not null,
  entity_id uuid not null,
  action text check (action in ('approve','reject')) not null,
  admin_id uuid references public.profiles(id) on delete set null,
  reason text,
  created_at timestamp with time zone default now()
);

-- Enable RLS
alter table public.profiles enable row level security;
alter table public.dogs enable row level security;
alter table public.albums enable row level security;
alter table public.photos enable row level security;

-- RLS: profiles
create policy "public read profiles" on public.profiles
for select using ( true );
create policy "user update own profile" on public.profiles
for update using ( auth.uid() = id );

-- RLS: dogs
create policy "public read approved dogs" on public.dogs
for select using (
  status = 'approved' or owner_id = auth.uid() or exists (
    select 1 from public.profiles p where p.id = auth.uid() and p.role = 'admin'
  )
);
create policy "insert dogs authenticated" on public.dogs
for insert with check ( auth.uid() = owner_id );
create policy "update own dogs or admin" on public.dogs
for update using ( owner_id = auth.uid() or exists (select 1 from public.profiles p where p.id = auth.uid() and p.role='admin') );
create policy "delete own dogs or admin" on public.dogs
for delete using ( owner_id = auth.uid() or exists (select 1 from public.profiles p where p.id = auth.uid() and p.role='admin') );

-- RLS: albums
create policy "read albums approved or owner/admin" on public.albums
for select using (
  status = 'approved' or exists (
    select 1 from public.dogs d where d.id = dog_id and d.owner_id = auth.uid()
  ) or exists (select 1 from public.profiles p where p.id = auth.uid() and p.role='admin')
);
create policy "insert albums authenticated" on public.albums
for insert with check (
  exists (select 1 from public.dogs d where d.id = dog_id and d.owner_id = auth.uid())
);
create policy "update/delete albums owner or admin" on public.albums
for all using (
  exists (select 1 from public.dogs d where d.id = dog_id and d.owner_id = auth.uid())
  or exists (select 1 from public.profiles p where p.id = auth.uid() and p.role='admin')
);

-- RLS: photos
create policy "read photos via albums policy" on public.photos
for select using (
  exists (
    select 1 from public.albums a
    join public.dogs d on d.id = a.dog_id
    where a.id = photos.album_id and (
      a.status = 'approved' or d.owner_id = auth.uid() or exists (select 1 from public.profiles p where p.id = auth.uid() and p.role='admin')
    )
  )
);
create policy "insert photos owner" on public.photos
for insert with check (
  exists (
    select 1 from public.albums a join public.dogs d on d.id = a.dog_id
    where a.id = album_id and d.owner_id = auth.uid()
  )
);
create policy "update/delete photos owner or admin" on public.photos
for all using (
  exists (
    select 1 from public.albums a join public.dogs d on d.id = a.dog_id
    where a.id = album_id and d.owner_id = auth.uid()
  ) or exists (select 1 from public.profiles p where p.id = auth.uid() and p.role='admin')
);

-- STORAGE buckets
insert into storage.buckets (id, name, public) values ('avatars','avatars', true) on conflict do nothing;
insert into storage.buckets (id, name, public) values ('dog-photos','dog-photos', true) on conflict do nothing;

-- Storage RLS (avatars)
create policy "avatars public read" on storage.objects for select using ( bucket_id = 'avatars' );
create policy "avatars owners write" on storage.objects for insert with check (
  bucket_id = 'avatars' and owner = auth.uid()
);

-- Storage RLS (dog-photos)
create policy "dog-photos public read" on storage.objects for select using ( bucket_id = 'dog-photos' );
create policy "dog-photos owners write" on storage.objects for insert with check (
  bucket_id = 'dog-photos' and owner = auth.uid()
);
